üå± COMANDOS R√ÅPIDOS - SISTEMA DE RIEGO INTELIGENTE
=====================================================

üìã PRERREQUISITOS:
- Docker Desktop instalado
- Docker Compose instalado

üöÄ INICIO R√ÅPIDO:
================

1. CLONAR Y ENTRAR AL PROYECTO:
   git clone <tu-repositorio>
   cd Aplicaci-n-Interactiva-Sistema-Agro-Riego

2. CONFIGURAR VARIABLES DE ENTORNO:
   Crear archivo: backend/.env
   Contenido:
   DATABASE_URL="postgresql://postgres:password@postgres:5432/agrodb"

3. INICIAR SERVICIOS DOCKER:
   docker-compose up -d

4. VERIFICAR CONTENEDORES:
   docker-compose ps

5. CREAR TABLAS DE BASE DE DATOS:
   docker-compose exec backend npx prisma migrate dev --name init

6. VERIFICAR QUE TODO FUNCIONE:
   docker-compose exec backend npm run test:all

‚úÖ ¬°LISTO! El sistema est√° funcionando en http://localhost:3000

üîß COMANDOS √öTILES:
==================

GESTI√ìN DOCKER:
---------------
docker-compose up -d                    # Iniciar servicios
docker-compose down                     # Detener servicios
docker-compose ps                       # Ver estado de contenedores
docker-compose logs backend             # Ver logs del backend
docker-compose logs postgres            # Ver logs de la base de datos
docker-compose build --no-cache backend # Reconstruir imagen

BASE DE DATOS:
--------------
docker-compose exec backend npx prisma migrate dev    # Ejecutar migraciones
docker-compose exec backend npx prisma studio         # Abrir Prisma Studio
docker-compose exec backend npx prisma migrate reset  # Resetear base de datos
docker-compose exec backend npx prisma generate       # Regenerar Prisma Client

TESTING Y DEBUGGING:
-------------------
docker-compose exec backend npm run test:all          # Todos los tests
docker-compose exec backend npm run debug:db          # Debugging de BD
docker-compose exec backend npm run test:controllers  # Tests de controllers
docker-compose exec backend npm run test:api          # Tests de API

üîç TROUBLESHOOTING:
==================

PROBLEMA: Contenedor se reinicia constantemente
SOLUCI√ìN: docker-compose logs backend

PROBLEMA: Error de conexi√≥n a base de datos
SOLUCI√ìN: docker-compose logs postgres

PROBLEMA: Error de Prisma Client
SOLUCI√ìN: docker-compose exec backend npx prisma generate

PROBLEMA: Error de migraciones
SOLUCI√ìN: docker-compose exec backend npx prisma migrate reset

üìä VERIFICACI√ìN R√ÅPIDA:
======================

1. Verificar contenedores:
   docker-compose ps

2. Verificar API:
   curl http://localhost:3000/parcelas

3. Verificar base de datos:
   docker-compose exec backend npm run debug:db

4. Verificar tests:
   docker-compose exec backend npm run test:all

üéØ RESULTADO ESPERADO:
=====================

‚úÖ Contenedores: agro-backend (Up), agro-postgres (Up)
‚úÖ API: Respondiendo en http://localhost:3000
‚úÖ Base de datos: Todas las tablas creadas
‚úÖ Tests: 43/43 endpoints funcionando, 100% √©xito

üìû EN CASO DE PROBLEMAS:
========================

1. Verificar que Docker est√© corriendo
2. Ejecutar: docker-compose logs
3. Revisar variables de entorno
4. Ejecutar tests para verificar estado

¬°El sistema est√° listo para desarrollo! üöÄ 